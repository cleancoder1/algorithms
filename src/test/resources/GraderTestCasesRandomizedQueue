
================================================================

Testing methods in RandomizedQueue
*-----------------------------------------------------------
Running 18 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), sample(),
isEmpty(), and size(). The probabilities of each operation are
(p1, p2, p3, p4, p5), respectively.

Test 1: Calls to enqueue() and size().
  *     5 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *    50 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
     - student   size() returned 0
     - reference size() returned 2
     - sequence of randomized queue operations was:
         rq.enqueue(25)
         rq.enqueue(17)
         rq.size()        ==> 0

  *   500 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
     - student   size() returned 0
     - reference size() returned 4
     - sequence of randomized queue operations was:
         rq.enqueue(103)
         rq.enqueue(395)
         rq.enqueue(6)
         rq.enqueue(137)
         rq.size()        ==> 0

  *  1000 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
     - student   size() returned 0
     - reference size() returned 6
     - sequence of randomized queue operations was:
         rq.enqueue(502)
         rq.enqueue(844)
         rq.enqueue(568)
         rq.enqueue(987)
         rq.enqueue(603)
         rq.enqueue(574)
         rq.size()        ==> 0

==> FAILED

Test 2: Calls to enqueue() and dequeue().
  *     5 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
     - student   size() returned 0
     - reference size() returned 3
     - sequence of randomized queue operations was:
         rq.enqueue(3)
         rq.enqueue(1)
         rq.enqueue(3)
         rq.size()        ==> 0

  *    50 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
     - student   size() returned 0
     - reference size() returned 4
     - sequence of randomized queue operations was:
         rq.enqueue(18)
         rq.enqueue(2)
         rq.enqueue(9)
         rq.enqueue(45)
         rq.isEmpty()     ==> false
         rq.size()        ==> 0

  *   500 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
     - student   size() returned 0
     - reference size() returned 10
     - sequence of randomized queue operations was:
         rq.enqueue(356)
         rq.enqueue(157)
         rq.enqueue(16)
         rq.enqueue(49)
         rq.enqueue(136)
         rq.enqueue(12)
         rq.enqueue(237)
         rq.enqueue(463)
         rq.enqueue(400)
         rq.isEmpty()     ==> false
         rq.enqueue(58)
         rq.size()        ==> 0

  *  1000 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
     - student   size() returned 0
     - reference size() returned 3
     - sequence of randomized queue operations was:
         rq.enqueue(828)
         rq.enqueue(710)
         rq.enqueue(664)
         rq.size()        ==> 0

  *     5 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
     - student   isEmpty() returned false
     - reference isEmpty() returned true
     - sequence of randomized queue operations was:
         rq.size()        ==> 0
         rq.size()        ==> 0
         rq.isEmpty()     ==> false

  *    50 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
     - failed on operation 1 of 50
     - dequeue() returned null
     - sequence of randomized queue operations was:
         rq.enqueue(19)
         rq.dequeue()     ==> null

  *   500 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
     - failed on operation 1 of 500
     - dequeue() returned null
     - sequence of randomized queue operations was:
         rq.enqueue(477)
         rq.dequeue()     ==> null

  *  1000 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
     - student   isEmpty() returned false
     - reference isEmpty() returned true
     - sequence of randomized queue operations was:
         rq.isEmpty()     ==> false

==> FAILED

Test 3: Calls to enqueue(), sample(), and size().
  *     5 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
     - failed on operation 2 of 5
     - sample() returned null
     - sequence of randomized queue operations was:
         rq.size()        ==> 0
         rq.enqueue(2)
         rq.sample()      ==> null

  *    50 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
     - failed on operation 3 of 50
     - sample() returned null
     - sequence of randomized queue operations was:
         rq.enqueue(42)
         rq.enqueue(40)
         rq.enqueue(38)
         rq.sample()      ==> null

  *   500 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
     - student   size() returned 0
     - reference size() returned 15

  *  1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
     - student   size() returned 0
     - reference size() returned 2
     - sequence of randomized queue operations was:
         rq.enqueue(283)
         rq.enqueue(452)
         rq.size()        ==> 0

  *     5 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
     - failed on operation 4 of 5
     - sample() returned null
     - sequence of randomized queue operations was:
         rq.size()        ==> 0
         rq.size()        ==> 0
         rq.size()        ==> 0
         rq.enqueue(3)
         rq.sample()      ==> null

  *    50 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
     - failed on operation 1 of 50
     - sample() returned null
     - sequence of randomized queue operations was:
         rq.enqueue(34)
         rq.sample()      ==> null

  *   500 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
     - failed on operation 1 of 500
     - sample() returned null
     - sequence of randomized queue operations was:
         rq.enqueue(150)
         rq.sample()      ==> null

  *  1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
     - failed on operation 1 of 1000
     - sample() returned null
     - sequence of randomized queue operations was:
         rq.enqueue(801)
         rq.sample()      ==> null

==> FAILED

Test 4: Calls to enqueue(), dequeue(), sample(), isEmpty(), and size().
  *     5 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
     - student   size() returned 0
     - reference size() returned 2
     - sequence of randomized queue operations was:
         rq.enqueue(2)
         rq.enqueue(0)
         rq.size()        ==> 0

  *    50 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
     - failed on operation 4 of 50
     - sample() returned null
     - sequence of randomized queue operations was:
         rq.enqueue(5)
         rq.enqueue(37)
         rq.enqueue(22)
         rq.enqueue(25)
         rq.sample()      ==> null

  *   500 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
     - student   size() returned 0
     - reference size() returned 2
     - sequence of randomized queue operations was:
         rq.enqueue(191)
         rq.enqueue(67)
         rq.size()        ==> 0

  *  1000 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
     - student   size() returned 0
     - reference size() returned 3
     - sequence of randomized queue operations was:
         rq.size()        ==> 0
         rq.enqueue(385)
         rq.isEmpty()     ==> false
         rq.enqueue(860)
         rq.enqueue(971)
         rq.size()        ==> 0

  *     5 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
  *    50 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
     - failed on operation 2 of 50
     - sample() returned null
     - sequence of randomized queue operations was:
         rq.enqueue(44)
         rq.isEmpty()     ==> false
         rq.sample()      ==> null

  *   500 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
     - student   isEmpty() returned false
     - reference isEmpty() returned true
     - sequence of randomized queue operations was:
         rq.size()        ==> 0
         rq.isEmpty()     ==> false

  *  1000 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
     - student   isEmpty() returned false
     - reference isEmpty() returned true
     - sequence of randomized queue operations was:
         rq.isEmpty()     ==> false

==> FAILED

Test 5: dequeue() and sample() from an empty randomized queue
  *  dequeue()
     java.util.NoSuchElementException not thrown
  *  sample()
     java.util.NoSuchElementException not thrown
==> FAILED

Test 6: Create multiple randomized queue objects at the same time
    - size() returns wrong result
    - student   = 0
    - reference = 1
     - failed on enqueue() operation 0 of 10 in randomized queue 1
    - size() returns wrong result
    - student   = 0
    - reference = 1
     - failed on enqueue() operation 0 of 100 in randomized queue 1
==> FAILED

Test 7: Check that iterator() returns correct items after a sequence of
        enqueue() operations
     java.lang.NullPointerException

     UtilCOS.compareAsMultisets(UtilCOS.java:307)
     TestRandomizedQueue.test7(TestRandomizedQueue.java:351)
     TestRandomizedQueue.main(TestRandomizedQueue.java:969)

==> FAILED

Test 8: Check that iterator() returns correct items after sequence of enqueue()
        and dequeue() operations
     java.lang.NullPointerException

     TestRandomizedQueue.test8(TestRandomizedQueue.java:392)
     TestRandomizedQueue.main(TestRandomizedQueue.java:970)

==> FAILED

Test 9: Create two nested iterators over same randomized queue
  *  N = 10
     java.lang.NullPointerException

     TestRandomizedQueue.twoNestedIterators(TestRandomizedQueue.java:421)
     TestRandomizedQueue.test9(TestRandomizedQueue.java:500)
     TestRandomizedQueue.main(TestRandomizedQueue.java:971)

  *  N = 1000
     java.lang.NullPointerException

     TestRandomizedQueue.twoNestedIterators(TestRandomizedQueue.java:421)
     TestRandomizedQueue.test9(TestRandomizedQueue.java:501)
     TestRandomizedQueue.main(TestRandomizedQueue.java:971)

==> FAILED

Test 10: Create two parallel iterators over same randomized queue
  *  N = 10
     - first call to iterator() returned null
     - second call to iterator() returned null
  *  N = 1000
     - first call to iterator() returned null
     - second call to iterator() returned null
==> FAILED

Test 11: Create two iterators over different randomized queues
     java.lang.NullPointerException

     UtilCOS.compareAsMultisets(UtilCOS.java:307)
     TestRandomizedQueue.test11(TestRandomizedQueue.java:612)
     TestRandomizedQueue.main(TestRandomizedQueue.java:973)

==> FAILED

Test 12: Create RandomizedQueue objects of different parameterized types
     java.lang.NullPointerException

     TestRandomizedQueue.test12(TestRandomizedQueue.java:637)
     TestRandomizedQueue.main(TestRandomizedQueue.java:974)

==> FAILED

Test 13: Check randomness of sample() by enqueueing strings, repeatedly calling
         sample(), and counting the frequency of each value.
  *  Enqueue strings A to C and sampling 3000 times
     java.lang.NullPointerException: called get() with null key

     edu.princeton.cs.algs4.ST.get(ST.java:75)
     TestRandomizedQueue.sampleRandomness(TestRandomizedQueue.java:671)
     TestRandomizedQueue.te

...

Warning: the grading output was truncated due to excessive length.
Typically, this is becasue you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception)